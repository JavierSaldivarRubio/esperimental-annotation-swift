@@ -1,79 +1,90 @@
name: Deploy DocC to Github Pages
on:
  # Manual run
  workflow_dispatch:
  # Runs on pushes targeting the master branch
  push:
    branches: ["master"]
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true
  
jobs:
  # One deployment deploy job since we're just deploying
  deploy:
    environment:
      # Must set to this for deploying to GitHub Pages
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: macos-12
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Force Xcode 13.3.1
        run: sudo xcode-select -s "/Applications/Xcode_13.3.1.app"
      
      - name: Build DocC
        run: |
          # Variables configurables
          SCHEME_NAME="AnnotationSwift"
          DESTINATION="generic/platform=iOS"
          OUTPUT_DIR="./deriveData"
          # Crear el directorio de salida si no existe
          mkdir -p $OUTPUT_DIR
          # Generar la documentación
          xcodebuild docbuild \
              -scheme $SCHEME_NAME \
              -destination $DESTINATION \
              -derivedDataPath $OUTPUT_DIR \
              -allowProvisioningUpdates
          # Mensaje de éxito
          echo "Documentación generada en $OUTPUT_DIR"
          # Buscar el archivo .doccarchive generado
          DOCS_ARCHIVE=$(find $OUTPUT_DIR -name "*.doccarchive" | head -n 1)
          echo "Archivo doccarchive creado en $DOCS_ARCHIVE"
          if [ -z "$DOCS_ARCHIVE" ]; then
            echo "No se encontró ningún archivo .doccarchive."
            exit 1
          fi
          # Procesar el archivo .doccarchive
          
          $(xcrun --find docc) process-archive transform-for-static-hosting $DOCS_ARCHIVE --output-path ./docs --hosting-base-path "experimental-annotation-swift"
          if [ -d "$OUTPUT_DIR" ]; then
            rm -rf $OUTPUT_DIR
          fi
          # Crear un archivo index.html que redirija a la ruta correcta
          echo "<script>window.location.href += 'documentation/$PROJECT_NAME'</script>" > $OUTPUT_DIR/index.html
          echo "Documentación transformada y lista para hospedaje estático en ./git-page"
#          # Crear un archivo index.html en la raíz que redirija a la ruta correcta
#          cat <<EOF > $OUTPUT_DIR/index.html
#          <!doctype html>
#          <html lang="en-US">
#          <head>
#              <meta charset="utf-8">
#              <meta http-equiv="X-UA-Compatible" content="IE=edge">
#              <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
#              <title>Documentation</title>
#              <script>window.location.href += 'documentation/$PROJECT_NAME'</script>
#          </head>
#          <body>
#          </body>
#          </html>
#          EOF
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload only the git-page directory
          path: 'docs'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
